generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  city      String
  type      String
  permis    String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  PENDING
  ACTIVE
}

model AutoEcole {
  id                Int    @id @default(autoincrement())
  name              String
  ownerName         String
  city              String
  address           String
  phone             String
  fix               String
  registerNumber    Int
  businessDocNumber Int

  status Status @default(ACTIVE)

  paymentConvenienceStatus Boolean @default(false)
  paymentConvenienceNum    Int?

  features Json

  Affectations Affectation[]
  permis       Permis[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permis {
  id Int @id @default(autoincrement())

  name                 String
  practicalTutorsSex   String
  theoreticalTutorsSex String

  practicalLangs   Json
  theoreticalLangs Json

  trainingPrice        Json
  repeatedPrice        Json
  practicalHourPrice   Json
  theoreticalHourPrice Json

  autoEcoleId Int
  autoEcole   AutoEcole @relation(fields: [autoEcoleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  vehicles Vehicle[]

  @@unique([name, autoEcoleId])
}

model Vehicle {
  id Int @id @default(autoincrement())

  brand String
  model Int

  permisId Int
  permis   Permis @relation(fields: [permisId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([permisId, brand, model])
}

model Affectation {
  id          Int       @id @default(autoincrement())
  phone       String
  permis      String
  type        String
  autoEcole   AutoEcole @relation(fields: [autoEcoleId], references: [id])
  autoEcoleId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  name      String
  autoEcole String
  city      String
  phone     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Commercial {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  phoneNumber String  @unique
  password  String
  regions   CommercialRegion[]
  clients   Etudiant[]
  isLoggedIn        Boolean            @default(false)
}

model Region {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  villes    Ville[]
  etudiants Etudiant[]
  ecoles    Ecole[]
  commercials CommercialRegion[]
}

// The join table for the many-to-many relationship
model CommercialRegion {
  commercialId Int
  regionId     Int
  commercial   Commercial @relation(fields: [commercialId], references: [id])
  region       Region     @relation(fields: [regionId], references: [id])

  @@id([commercialId, regionId])  // Composite primary key
}

model Ville {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  region    Region    @relation(fields: [regionId], references: [id])
  regionId  Int
  etudiants Etudiant[]
}



model PartnershipRequest {
  id          Int      @id @default(autoincrement())
  schoolName  String
  email       String
  phone       String
  message     String
  createdAt   DateTime @default(now())
  status      String  @default("En attente")
}


model Ecole {
  id                Int                @id @default(autoincrement())
  name              String
  email             String             @unique
  password          String
  city              String
  phoneNumber       String
  licenseTypes      LicenseType[]      @relation("EcoleLicenseTypes")
  vehiclesPerType   VehiclePerType[]
  students          Etudiant[]         @relation("EcoleStudents")
  region            Region?            @relation(fields: [regionId], references: [id]) // Relation ajoutée
  regionId          Int?               // Clé étrangère vers Region
  isLoggedIn        Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Etudiant {
  id                Int       @id @default(autoincrement())
  username          String    
  email             String    @unique
  number            String
  password          String
  birthdate         DateTime
  drivingLicenseType String
  region            Region    @relation(fields: [regionId], references: [id])
  regionId          Int
  ville             Ville     @relation(fields: [villeId], references: [id])
  villeId           Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  isLoggedIn        Boolean   @default(false)
  commercialId      Int?      // Foreign key to Commercial
  commercial        Commercial? @relation(fields: [commercialId], references: [id], onDelete: Cascade)
  ecoleId           Int?
  ecole             Ecole?    @relation("EcoleStudents", fields: [ecoleId], references: [id], onDelete: Cascade)
  seancesPratique   Int       @default(0)
}

model LicenseType {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  ecoles            Ecole[]            @relation("EcoleLicenseTypes")
  vehiclesPerType   VehiclePerType[]   @relation("LicenseTypeVehicles")
}

model VehiclePerType {
  id                Int                @id @default(autoincrement())
  vehicleType       String
  count             Int
  ecoleId           Int
  ecole             Ecole              @relation(fields: [ecoleId], references: [id])
  licenseTypeId     Int
  licenseType       LicenseType        @relation("LicenseTypeVehicles", fields: [licenseTypeId], references: [id])
}
